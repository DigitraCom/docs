"use strict";(self.webpackChunktest_website=self.webpackChunktest_website||[]).push([[607],{3889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(58168),r=(t(96540),t(15680));const i={sidebar_position:3,label:"Websocket",tags:["websocket"]},l=void 0,s={unversionedId:"WebSocket",id:"WebSocket",title:"WebSocket",description:"Overview",source:"@site/docs/WebSocket.md",sourceDirName:".",slug:"/WebSocket",permalink:"/docs/WebSocket",draft:!1,tags:[{label:"websocket",permalink:"/docs/tags/websocket"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,label:"Websocket",tags:["websocket"]},sidebar:"tutorialSidebar",previous:{title:"Start Withdrawal",permalink:"/docs/rest/wallet/post-v-1-wallet-withdrawals"},next:{title:"Changelog",permalink:"/docs/Changelog"}},o={},p=[{value:"Overview",id:"overview",level:2},{value:"Request process",id:"request-process",level:2},{value:"Connection",id:"connection",level:2},{value:"Ping",id:"ping",level:2},{value:"Subscription",id:"subscription",level:2},{value:"Channels",id:"channels",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Limits",id:"limits",level:2},{value:"Errors",id:"errors",level:2}],d={toc:p},g="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"Websockets enable web applications to maintain fast bidirectional communication with server-side processes, providing real-time data updates, avoiding polling the server through REST API endpoints."),(0,r.yg)("p",null,"All functionalities with available interfaces for external integration, especially transactional ones, are accessible through REST APIs. Some features with frequent data updates are accessible through Websockets. In your applications, you'll need to use REST API endpoints for some functions and Websockets for others."),(0,r.yg)("p",null,"Server URL: ",(0,r.yg)("inlineCode",{parentName:"p"},"wss://ws.digitra.com")),(0,r.yg)("h2",{id:"request-process"},"Request process"),(0,r.yg)("p",null,"A websocket connection goes through this lifecycle:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Establish a websocket connection with Digitra.com;"),(0,r.yg)("li",{parentName:"ul"},"(Optional) Authenticate using your API credentials;"),(0,r.yg)("li",{parentName:"ul"},"Send pings at regular intervals;"),(0,r.yg)("li",{parentName:"ul"},"Subscribe to a channel;"),(0,r.yg)("li",{parentName:"ul"},"Receive subscription response;"),(0,r.yg)("li",{parentName:"ul"},"Receive data;"),(0,r.yg)("li",{parentName:"ul"},"Unsubscribe;")),(0,r.yg)("p",null,"All messages exchanged between client and server are written in JSON and follow most of Digitra.com REST API conventions, except if redefined on this documentation. "),(0,r.yg)("h2",{id:"connection"},"Connection"),(0,r.yg)("p",null,"A websocket connection can be made using libraries present in most languages. The Digitra.com connection endpoint is defined at the beginning of this document."),(0,r.yg)("p",null,"Didactic-oriented connection example in Python:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"import json\nimport websocket\n\n# Create a connection with websocket endpoint and define functions to handle websocket events\nws = websocket.WebSocketApp(\n  url=<websocket_url_endpoint>,\n  on_message=<function_to_handle_received_messages>,\n  on_error=<function_to_handle_error_messages>,\n  on_close=<function_to_handle_closed_connections>\n)\nws.run_forever()\n\n# Send messages as subscriptions, authentication, ping etc.\nws.send(\n    json.dumps(<messages>)\n)\n")),(0,r.yg)("h2",{id:"ping"},"Ping"),(0,r.yg)("p",null,"To keep the connection alive, the following message should be sent every 30 seconds:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"op": "PING"}\n')),(0,r.yg)("p",null,"To avoid network latency problems, we recommend sending the ping message every 20 seconds. If the server does not receive this message within the defined window time, the socket connection will be closed."),(0,r.yg)("p",null,"In response, the server will send a pong message:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"type": "PONG"}\n')),(0,r.yg)("p",null,"If the pong response is not received within 30 seconds, reconnect."),(0,r.yg)("h2",{id:"subscription"},"Subscription"),(0,r.yg)("p",null,"To start receiving data, it is necessary to send a subscription message with the following format:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"op": "SUBSCRIBE", "channel": "<channel>", "market": "<market>"}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-example"},'{"op": "SUBSCRIBE", "channel": "ORDERBOOK", "market": "BTC-USDT"}\n')),(0,r.yg)("p",null,"Here, the 'channel' can be one of those described in the Channels chapter below, and 'market' is an optional field representing one of the available markets (refer to ",(0,r.yg)("a",{parentName:"p",href:"/rest/markets/get-markets"},"list markets"),"). The obligation of the 'market' field is depending of the channel type."),(0,r.yg)("p",null,"In response, the server sends a confirmation message, for example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"type":"SUBSCRIBED","channel":"ORDERBOOK","market":"BTC-USDT"}\n')),(0,r.yg)("p",null,"To stop receiving data from a channel, it is necessary to send an unsubscription message:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"op": "UNSUBSCRIBE", "channel": "<channel>", "market": "<market>"}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-example"},'{"op": "UNSUBSCRIBE", "channel": "ORDERBOOK", "market": "BTC-USDT"}\n')),(0,r.yg)("p",null,"Upon receiving this message, the server sends a confirmation message, as shown below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"type":"UNSUBSCRIBED", "channel":"ORDERBOOK","market":"BTC-USDT"}\n')),(0,r.yg)("p",null,"To retrieve all active subscriptions, send a list subscriptions message:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"op": "SUBSCRIPTIONS"}\n')),(0,r.yg)("p",null,"In response, the server will list all your active subscriptions, as demonstrated below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "SUBSCRIPTIONS",\n  "data": [\n    {\n      "channel": "ORDERBOOK",\n      "market": "BTC-USDT"\n    }, \n    {\n      "channel": "ORDERS",\n      "market": "BTC-USDT"}\n  ]\n}\n')),(0,r.yg)("h2",{id:"channels"},"Channels"),(0,r.yg)("p",null,"The general response format of channel data is:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"type"),": Message type. For channel content, it would be ",(0,r.yg)("inlineCode",{parentName:"li"},"update")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"error"),";"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"channel"),": (optional) If the type were ",(0,r.yg)("inlineCode",{parentName:"li"},"updated"),", it is the channel subscribed;"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"market"),": (optional) If the type were ",(0,r.yg)("inlineCode",{parentName:"li"},"updated"),", it is the market subscribed;"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error_code"),": (optional) If the type were ",(0,r.yg)("inlineCode",{parentName:"li"},"error"),", it is the error code detailed in the following topics;"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"message"),": (optional) If the type were ",(0,r.yg)("inlineCode",{parentName:"li"},"error"),", it is a message describing the error."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"data"),": (optional) If the type is ",(0,r.yg)("strong",{parentName:"li"},"not")," ",(0,r.yg)("inlineCode",{parentName:"li"},"error"),", it is the main content with specific fields according the current channel. ")),(0,r.yg)("p",null,"There are some channels for subscription and they correspond to the main content of the equivalent REST endpoints. For the message content details see the documentation of the equivalent REST API endpoint."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ORDERBOOK")," channel provides the orderbook's best 100 orders on either side when a update happens (see\n",(0,r.yg)("a",{parentName:"li",href:"/rest/markets/get-orderbook-by-market-id"},"/v1/markets/{market_id}/orderbook"),"). The ",(0,r.yg)("inlineCode",{parentName:"li"},"market"),"field is required on subscription. After subscription, the server will sent the current orderbook, even if no recent update has happened."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ORDERS")," channel provides the updated order details when any of your orders has an update (see\n",(0,r.yg)("a",{parentName:"li",href:"/rest/trade/get-order-by-id"},"/v1/trade/orders/{order_id}"),"). ",(0,r.yg)("inlineCode",{parentName:"li"},"Requires authentication"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"FILLS")," channel provides the trades updates of any of your orders when the order has a trade match (see\n",(0,r.yg)("a",{parentName:"li",href:"/rest/trade/get-fills"},"/v1/trade/fills"),"). ",(0,r.yg)("inlineCode",{parentName:"li"},"Requires authentication"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"PRICES")," channel provides the most updated bid and ask offers and other data related with trades on market (see\n",(0,r.yg)("a",{parentName:"li",href:"/rest/markets/get-prices-by-market-id"},"/v1/markets/{market_id}/prices"),"). The ",(0,r.yg)("inlineCode",{parentName:"li"},"market"),"field is required on subscription."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"TRADES")," channel provides trade data when a trade happens (see\n",(0,r.yg)("a",{parentName:"li",href:"/rest/markets/get-trades-by-market-id"},"/v1/markets/{market_id}/trades"),"). The ",(0,r.yg)("inlineCode",{parentName:"li"},"market"),"field is required on subscription.")),(0,r.yg)("h2",{id:"authentication"},"Authentication"),(0,r.yg)("p",null,"In all authentication-required channels, the connection needs to be authenticated by a signature using your API credentials before subscription."),(0,r.yg)("p",null,"For channels that do not require authentication, authentication is recommended for support purpose."),(0,r.yg)("p",null,"To create API credentials, you need to have a verified account, created by the Digitra.com mobile app, and access your profile page on the Digitra.com web application."),(0,r.yg)("p",null,"An API credential is formed by an API key and a client secret."),(0,r.yg)("p",null,"The authorization process consists of sending these 3 values upon connection:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"api_key"),': "<your_api_key>" used to identify you;'),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"timestamp"),": the current timestamp (see ",(0,r.yg)("a",{parentName:"li",href:"/rest/General#data-types"},"Timestamps Date Type"),") used to time out old requests; "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"signature"),": used to ensure that the request was generated by the credential holder. It is generated by SHA256 HMAC of a inline concatenation of ",(0,r.yg)("inlineCode",{parentName:"li"},"timestamp")," and 'auth' word: ",(0,r.yg)("inlineCode",{parentName:"li"},"{timestamp}auth"),".")),(0,r.yg)("p",null,"The code below, in Python, and the output can help you to implement the signature:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import time\nimport hmac\nimport json\nfrom requests import Request\n\nsecret = "<your_api_client_secret>".encode()\ntimestamp = str(int(time.time() * 1000000))\n\nsignature_payload = f"{timestamp}auth".encode()\nsignature = hmac.new(secret, signature_payload, "sha256").hexdigest()\n\nprint(signature_payload.decode())\nprint(signature)\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-output"},"'1676040464591112auth'\n'a7ecc22546b496fb2c6c48e253dec2a1a0a4a497553e023aa4244b1f29b5f9f5'\n")),(0,r.yg)("p",null,"With generated signature, the authentication is made sending the following message:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'{\n  "op": "AUTH",\n  "api_key": <your_api_key>,\n  "timestamp": <timestamp>,\n  "signature": <signature>\n}\n')),(0,r.yg)("p",null,"As response, the server will send:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'{"type: "AUTHENTICATED", "api_key": "<your_api_key>"}\n')),(0,r.yg)("p",null,"One websocket connection may be logged in to at most one user. If the connection is already authenticated, further attempts to log in will result in error."),(0,r.yg)("p",null,"Based on what was explained above, using Python with a more didactic-focused code, an authenticated connection can be done like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import time\nimport hmac\nimport json\nimport requests\nimport websocket\nimport threading\n\napi_key = "a92977146953450a889ad20e7a148c60"\n\n# Define the secret key in bytes.\nsecret = "ek85VGlhMlFUOF9LQUxqNW16RDFfR2hETk5rWFlPQjlVQVcxUFlZTGpvdF9BVUZBLURMTkNMcllCaU5QSEIwRHFvM3dwVDMxV3IxWmYwLVloVzdaQlE9PQ".encode()\n\n# Define the timestamp in microseconds.\ntimestamp = str(int(time.time() * 1000000))\n\n# Define the signature payload.\nsignature_payload = f"{timestamp}auth".encode()\n\n# Sign the payload with the secret key.\nsignature = hmac.new(secret, signature_payload, "sha256").hexdigest()\n\n# Define a function to print received messages\ndef on_message(wsapp, message):\n    print(message)\n\n# Define a function to ping server each 25 seconds\ndef websocket_send_heartbeat(self, ws):\n    ws.send(json.dumps({"op": "PING"}))\n    threading.Timer(25, websocket_send_heartbeat, args=[ws]).start()\n\n# Define a function to login, subscribe and ping after connection\ndef on_open(ws):\n    ws.send(json.dumps({"op": "AUTH", "api_key": api_key, "timestamp": timestamp, "signature": signature}))\n    ws.send(json.dumps({"op": "SUBSCRIBE", "channel": "ORDERS", "market": "BTC-USDT"}))\n    websocket_send_heartbeat(ws)\n\n# Start a websocket connection\nws = websocket.WebSocketApp(\n    "wss://ws.digitra.com",\n    on_message=on_message,\n    on_open=on_open,\n)\nws.run_forever()\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-output"},'{"type": "AUTHENTICATED", "api_key": "a92977146953450a889ad20e7a148c60"}\n{"type": "SUBSCRIBED", "channel": "ORDERS", "market": "BTC-USDT"}\n{"type": "PONG"}\n')),(0,r.yg)("h2",{id:"limits"},"Limits"),(0,r.yg)("p",null,"100 simultaneous authenticated connections per customer account."),(0,r.yg)("p",null,"100 simultaneous connections from same IP."),(0,r.yg)("p",null,"100 new connections from same IP in 5 minutes."),(0,r.yg)("p",null,"300 sent messages by the client in 5 minute per connection."),(0,r.yg)("p",null,"IPs that repeatedly exceed the limits may be blocked by the server and API keys may be deleted."),(0,r.yg)("h2",{id:"errors"},"Errors"),(0,r.yg)("p",null,"Any error caused by the client or server will result in a disconnection. As the WebSocket protocol has default status codes (see ",(0,r.yg)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc6455#section-7.3"},"https://www.rfc-editor.org/rfc/rfc6455#section-7.3"),"), errors will be raised under one of them."),(0,r.yg)("p",null,"Error list:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"WebSocket status code"),(0,r.yg)("th",{parentName:"tr",align:null},"Error code"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1007"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_json"),(0,r.yg)("td",{parentName:"tr",align:null},"Invalid JSON message.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1006"),(0,r.yg)("td",{parentName:"tr",align:null},"no_ping"),(0,r.yg)("td",{parentName:"tr",align:null},"Ping message not received by server into the defined time interval.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1009"),(0,r.yg)("td",{parentName:"tr",align:null},"message_too_big"),(0,r.yg)("td",{parentName:"tr",align:null},"Message is too big. Max message size is 512 bytes.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1008"),(0,r.yg)("td",{parentName:"tr",align:null},"too_many_connections"),(0,r.yg)("td",{parentName:"tr",align:null},"You reached the maximum connection allowed by one of defined limits.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1008"),(0,r.yg)("td",{parentName:"tr",align:null},"slow_consumption"),(0,r.yg)("td",{parentName:"tr",align:null},"There are too many messages waiting consumption.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1008"),(0,r.yg)("td",{parentName:"tr",align:null},"too_many_messages"),(0,r.yg)("td",{parentName:"tr",align:null},"There are too many being sent to server.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_operation"),(0,r.yg)("td",{parentName:"tr",align:null},"Operation invalid or not set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_channel"),(0,r.yg)("td",{parentName:"tr",align:null},"Channel invalid or not set.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_market"),(0,r.yg)("td",{parentName:"tr",align:null},"Invalid market.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"missing_required_field::{field}"),(0,r.yg)("td",{parentName:"tr",align:null},"A required field is missing. Check the documentation of the operation requested.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"channel_subscribed"),(0,r.yg)("td",{parentName:"tr",align:null},"Subscription request for a channel that has already been previously subscribed by the customer.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},"channel_not_subscribed"),(0,r.yg)("td",{parentName:"tr",align:null},"Unsubscription request for a channel that has not been previously subscribed to by the client.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4001"),(0,r.yg)("td",{parentName:"tr",align:null},"authorized"),(0,r.yg)("td",{parentName:"tr",align:null},"This connection already have a authentication.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4001"),(0,r.yg)("td",{parentName:"tr",align:null},"unauthorized"),(0,r.yg)("td",{parentName:"tr",align:null},"The channel requires authentication not performed yet.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4001"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_signature"),(0,r.yg)("td",{parentName:"tr",align:null},"Invalid signature.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4001"),(0,r.yg)("td",{parentName:"tr",align:null},"invalid_timestamp"),(0,r.yg)("td",{parentName:"tr",align:null},"The timestamp is invalid.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4001"),(0,r.yg)("td",{parentName:"tr",align:null},"old_timestamp"),(0,r.yg)("td",{parentName:"tr",align:null},"The timestamp is older than 30 seconds.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1011"),(0,r.yg)("td",{parentName:"tr",align:null},"internal_server"),(0,r.yg)("td",{parentName:"tr",align:null},"Internal server error.")))))}c.isMDXComponent=!0}}]);